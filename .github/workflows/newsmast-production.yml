run-name: ${{ github.event_name }}-${{ github.ref }}
name: Build and Deploy Web-Production

on:
  workflow_dispatch:
  push:
    branches:
      - production

env:
  WEB_DEFINITION: .task/newsmast_web_production.json
  SIDEKIQ_DEFINITION: .task/newsmast_sidekiq_production.json
  STREAMING_DEFINITION: .task/newsmast_streaming_production.json
  REGISTRY: ${{ secrets.AWS_REGION }}.amazonaws.com
  REPOSITORY: ${{ secrets.REPOSITORY }}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup and Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare --activate

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/build-state.yml
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache Ruby dependencies
        uses: actions/cache@v4
        id: cache-gems
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Cache Node dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            streaming/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/yarn.lock', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "Installing dependencies with Yarn 4.9.1..."
          yarn --version
          yarn install --immutable

  build-web:
    name: Build Web Application
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-web-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-web-
            ${{ runner.os }}-buildx-

      - name: Build and push web image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPOSITORY }}
          IMAGE_TAG: ${{ vars.PRODUCTION_IMAGE_TAG }}
        run: |
          echo "Building web application image..."
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --push \
            .
          
          # Move cache to prevent growth
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
          echo "Successfully built and pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  build-streaming:
    name: Build Streaming Service
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers for streaming
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-streaming
          key: ${{ runner.os }}-buildx-streaming-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-streaming-
            ${{ runner.os }}-buildx-

      - name: Build and push streaming image
        id: build-streaming-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPOSITORY }}
          IMAGE_TAG: ${{ vars.STREAMING_PRODUCTION_IMAGE_TAG }}
        run: |
          echo "Building streaming service image..."
          docker buildx build \
            --platform linux/amd64 \
            --file ./streaming/Dockerfile \
            --cache-from type=local,src=/tmp/.buildx-cache-streaming \
            --cache-to type=local,dest=/tmp/.buildx-cache-streaming-new,mode=max \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --push \
            .
          
          # Move cache to prevent growth
          rm -rf /tmp/.buildx-cache-streaming
          mv /tmp/.buildx-cache-streaming-new /tmp/.buildx-cache-streaming
          
          echo "Successfully built and pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-web, build-streaming]
    if: github.ref == 'refs/heads/production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Update web service task definition
        id: task-def-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.WEB_DEFINITION }}
          container-name: ${{ secrets.WEB_PRODUCTION_CONTAINER }}
          image: ${{ secrets.WEB_PRODUCTION_IMAGE }}

      - name: Deploy web service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-web.outputs.task-definition }}
          service: ${{ secrets.WEB_PRODUCTION_SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_PRODUCTION }}
          wait-for-service-stability: false

      - name: Update Sidekiq task definition
        id: task-def-sidekiq
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.SIDEKIQ_DEFINITION }}
          container-name: ${{ secrets.SIDEKIQ_PRODUCTION_CONTAINER_NAME }}
          image: ${{ secrets.WEB_PRODUCTION_IMAGE }}

      - name: Deploy Sidekiq service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-sidekiq.outputs.task-definition }}
          service: ${{ secrets.SIDEKIQ_PRODUCTION_SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_PRODUCTION }}
          wait-for-service-stability: false

      - name: Update Streaming task definition
        id: task-def-streaming
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.STREAMING_DEFINITION }}
          container-name: ${{ secrets.STREAMING_PRODUCTION_CONTAINER_NAME }}
          image: ${{ secrets.STREAMING_PRODUCTION_IMAGE }}

      - name: Deploy Streaming service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-streaming.outputs.task-definition }}
          service: ${{ secrets.STREAMING_PRODUCTION_SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_PRODUCTION }}
          wait-for-service-stability: false

      - name: Deployment complete
        run: |
          echo "Deployment to production environment completed successfully!"
          echo "Web service: ${{ secrets.WEB_PRODUCTION_SERVICE_NAME }}"
          echo "Sidekiq service: ${{ secrets.SIDEKIQ_PRODUCTION_SERVICE_NAME }}"
          echo "Streaming service: ${{ secrets.STREAMING_PRODUCTION_SERVICE_NAME }}"
          echo "Cluster: ${{ secrets.CLUSTER_PRODUCTION }}"
